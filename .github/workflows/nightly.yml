# Nightly Build & Pre-release
name: "Create Release"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
     - cron: '0 7 * * *'
  workflow_dispatch:

env:
  NIGHTLY_TAG: "v3.0.0-9bit-beta"
  NIGHTLY_NAME: "3.0.0-9bit-beta"
  NIGHTLY_BODY: |
    This is the current Polished Crystal 3.0.0 9bit *beta* release. The assets all have an 8-character "commit hash" at the end to identify the exact code they're built from.

    The **.gbc** assets are ROMs. If you just want to play the game, download one (regular, `-faithful` which omits some non-canon changes, or `noir` which is in grayscale) and load it in [BGB](https://bgb.bircd.org/), [mGBA](https://mgba.io/), [Gambatte](https://github.com/sinamas/gambatte), or another accurate Game Boy Color emulator. (***Do not use VBA*** or VBA-M.) If your emulator or flashcart has issues with supporting a real time clock (or you desire it disabled for any other reason), download your preferred version with the `-nortc` flag.

    The **.sym** assets are "symbol files". They're useful for debugging, or for [discovering cheat codes](https://github.com/pret/pokecrystal/wiki/Discovering-GameShark-cheat-codes), although cheats are *not* officially supported and may cause bugs or crashes. (Do ***not*** ask the developers for cheat codes.)

    The **.patch** assets are 3DS Virtual Console patches to enable trading and battling over Wi-Fi. You can bundle the .gbc and corresponding .patch into a playable .cia file using [poke-cia](https://github.com/vulcandth/poke-cia).

    The **.bsp** asset is a [BSP](https://github.com/aaaaaa123456789/bsp) save file patch in case you need to upgrade a save file from an older 3.0.0 beta build, using a patcher like the one for [PokÃ©mon Prism](http://pokemonprism.com/patcher.html).

    The **polisheddebug** assets are ROMs and symbol files with extra features to help debug the game. Do ***not*** download these to just play with; use them to help the developers diagnose and fix bugs, or create new features.

permissions:
  contents: write

jobs:
  check-build:
    name: "Check Build"
    runs-on: ubuntu-latest
    outputs: 
      should_compile: ${{ steps.check-if-should-compile.outputs.should_compile }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
      commit_message: ${{ steps.set-sha.outputs.commit_message }}
    steps:
      - id: set-sha
        name: "Get latest Rangi42 short commit SHA"
        run: |
          echo "short_sha=$(curl -s https://api.github.com/repos/Rangi42/polishedcrystal/commits/9bit | jq -r '.sha' | cut -c1-8)" >> $GITHUB_OUTPUT
          echo "commit_message=$(curl -s https://api.github.com/repos/Rangi42/polishedcrystal/commits/9bit | jq -r '.commit.message')" >> $GITHUB_OUTPUT

      - name: "Checkout repository"
        uses: actions/checkout@v4

      - id: check-if-should-compile
        name: "Check if should compile"
        run: |
          tag="${{ env.NIGHTLY_TAG }}-${{ steps.set-sha.outputs.short_sha }}"
          previous_releases=$(curl -s https://api.github.com/repos/lucasliet/polishedcrystal-builder/releases | jq -r '.[].name')
          if echo "$previous_releases" | grep -q "$tag"; then
            echo "Compile is unecessary, latest commit already compiled $tag"
          else
            echo "tag $tag is not in previous_releases, proceeding..."
            echo "should_compile=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: "Release"
    needs: check-build
    if: ${{ needs.check-build.outputs.should_compile }}
    uses: lucasliet/polishedcrystal-builder/.github/workflows/build.yml@main

  update_release:
    name: "Update latest release to pre-release"
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get the latest release
      id: get_release
      run: |
        latest_release=$(curl -s https://api.github.com/repos/lucasliet/polishedcrystal-builder/releases/latest)
        echo "::set-output name=tag_name::$(echo $latest_release | jq -r '.tag_name')"
        echo "::set-output name=release_id::$(echo $latest_release | jq -r '.id')"

    - name: Update the release to pre-release
      run: |
        curl -X PATCH \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/lucasliet/polishedcrystal-builder/releases/${{ steps.get_release.outputs.release_id }} \
          -d '{"prerelease": true}'

  release:
    name: "Release / Publish"
    runs-on: ubuntu-latest
    needs: [check-build, build]
    steps:
      # DOWNLOAD ALL BUILD ARTIFACTS
      - id: download-polishedcrystal
        name: "Download polishedcrystal"
        uses: actions/download-artifact@v4
        with:
          name: "polishedcrystal"
          path: "./build"
      - id: download-polishedcrystal-faithful
        name: "Download polishedcrystal-faithful"
        uses: actions/download-artifact@v4
        with:
          name: "polishedcrystal-faithful"
          path: "./build"
      - id: download-polisheddebug
        name: "Download polisheddebug"
        uses: actions/download-artifact@v4
        with:
          name: "polisheddebug"
          path: "./build"
      - id: download-polisheddebug-faithful
        name: "Download polisheddebug-faithful"
        uses: actions/download-artifact@v4
        with:
          name: "polisheddebug-faithful"
          path: "./build"
      - id: download-polishedcrystal-savepatch
        name: "Download polishedcrystal-savepatch"
        uses: actions/download-artifact@v4
        with:
          name: "polishedcrystal-savepatch"
          path: "./build"

      # CREATE NEW RELEASE
      - name: Publish Release to Github
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./build/*"
          tag: ${{ env.NIGHTLY_TAG }}-${{ needs.check-build.outputs.short_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          removeArtifacts: true
          prerelease: false
          body: |
            compile from commit: https://github.com/Rangi42/polishedcrystal/commit/${{ needs.check-build.outputs.short_sha }} | ${{ needs.check-build.outputs.commit_message }}
            ${{ env.NIGHTLY_BODY }}
